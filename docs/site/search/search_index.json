{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Breadroll.js, is a simple lightweight application library for parsing csv, tsv, and other delimited files, performing EDA (exploratory data analysis), and data processing operations on multivariate datasets. Think pandas but written in Typescript and developed on the Bun Runtime.</p> <ul> <li>Fast: Breadroll is built on Bun, the all-in-one Javascript runtime built for speed</li> <li>File I/O: With current support for local data sources, remote sources support coming soon</li> <li>Easy-to-use: Compose queries using filter keywords that reads like English and are easy to comprehend.</li> </ul> <p>Experimental</p> <p>This library is experimental and is still in active development. Although we make sure each version is tested throughly, we suggest you use it with some caution, as some unexpected behaviors can be present.</p>"},{"location":"#installation","title":"Installation","text":"<p>System Requirements:</p> <ul> <li>Bun</li> <li>MacOS (tested), Linux (untested)</li> <li>Typescript &gt;= 5.1</li> </ul>"},{"location":"#bun","title":"Bun","text":"<p>Breadroll is built on and optimized for Bun.js. You can install Bun by running the following <pre><code>curl https://bun.sh/install | bash\n</code></pre> create a new Bun project by running <pre><code>bun init\n</code></pre> then you can now install Breadroll using <pre><code>bun add breadroll\n</code></pre></p>"},{"location":"#easy-api","title":"Easy API","text":"<p>Breadroll provides an easy to use API that gets you from zero to data processing in no time, with lazy loading of these delimited files via Bun's File I/O <code>Bun.file()</code>, the file parsed based on the <code>DataframeReadOptions</code>, and convert into a <code>Dataframe</code>, and easily read out the content of the Dataframe using <code>.value</code>.</p> Note <p>The dataset used in these example code snippets was gotten from Kaggle; Employee Salaries for different job roles</p> <pre><code>const file: Breadroll = new Breadroll(\"./data/ds_salaries.csv\", { header: true, delimiter: \",\" });\nconst df: Dataframe = await file.open();\nconst selected: Dataframe = df.select([\"job_title\", \"salary\", \"salary_currency\", \"salary_in_usd\"]);\nconst values: Array&lt;ObjectType&gt; = selected.values\n\nconsole.log(values)\n</code></pre>"},{"location":"#filtering","title":"Filtering","text":"<p>Peform complex filtering; with various filters including range filters like <code>in between</code> that can be achieved using an optional function parameter <code>limit</code> which is the upper limit. These range filter are only effective with numbers (integers, floating-point). <pre><code>df.filter(\"age\", \"is between\", 30, 40); // returns number\n</code></pre> Perform even more complex filtering with multiple / chained filter, you can chain the filter ie. filtering the previously filtered <code>Dataframe</code>, the chained filter can be as long as you need them to be. <pre><code>df.filter(\"age\", \"is between\", 30, 40)\n  .filter(\"salary\", \"greater than\", 70000)\n  .filter(\"work_year\", \"equals\", 2020); // return Dataframe\n</code></pre></p>"},{"location":"#a-little-math","title":"A Little Math","text":"<p>Get a single number that accurately represents the underlying data with the many provided aggregation functions, the likes of average (mean), max, min, sum, count, etc. with more in development <pre><code>df.sum(\"capital_gain\") // returns number\ndf.average(\"capital_gain\") // returns number\ndf.count // returns number\n</code></pre></p> <p>This project running on bun v1.0.22. Bun.js is a fast all-in-one JavaScript runtime.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#january-20th-2024-v031","title":"January 20th, 2024 - v0.3.1","text":"<ul> <li><code>Dataframe.select(keys: Array&lt;string&gt;): Dataframe</code> This function return a new Dataframe with only the desired rows, ie. rows with the specified labels</li> </ul>"},{"location":"changelog/#january-19th-2024-v03","title":"January 19th, 2024 - v0.3","text":"<ul> <li> <p><code>Dataframe.to_blob(filetype: \"csv\" | \"tsv\"): Blob</code> This function converts the current dataframe into a Blob of MIME filetype <code>\"csv\" | \"tsv\"</code></p> </li> <li> <p><code>Dataframe.save</code></p> <ul> <li><code>.json(filepath: string)</code>: This function saves <code>Dataframe</code> as a JSON files ie. for example <code>Dataframe.save.json(filepath: string)</code>.</li> <li><code>.csv(filepath: string)</code>: This function saves <code>Dataframe</code> as a CSV files ie. for example <code>Dataframe.save.csv(filepath: string)</code>.</li> <li><code>.tsv(filepath: string)</code>: This function saves <code>Dataframe</code> as a TSV files ie. for example <code>Dataframe.save.tsv(filepath: string)</code>.</li> </ul> </li> </ul>"},{"location":"changelog/#sept-15th-2023-v02","title":"Sept 15th, 2023 - v0.2","text":"<ul> <li><code>Dataframe.min(key: string): number</code> This function returns the minimum value of all the values of the specified column ie. key. Note, the values are coerse into a number type</li> <li><code>Dataframe.max(key: string): number</code> This function returns the maximum value of all the values of the specified column ie. key. Note, the values are coerse into a number type</li> <li><code>Dataframe.sum(key: string): number</code> This function returns the sum of all the values of the specified column ie. key. Note, the values are coerse into a number type</li> <li><code>Dataframe.average(key: string): number</code> This function returns the average of all the values of the specified column ie. key. Note, the values are coerse into a number type</li> </ul>"},{"location":"changelog/#aug-27th-2023-v013","title":"Aug 27th, 2023 - v0.1.3","text":"<ul> <li><code>Dataframe.use(callback: (dataframe: Array&lt;ObjectType&gt;) =&gt; Dataframe): Dataframe</code> it provides access to the object ie. it kinda ejects from the base class allowing user to perform their own custom operation on a the current dataframe version, eg. after running <code>Dataframe.filter</code></li> <li>Added more filters, <code>greater than or equal to</code>, <code>less than or equal to</code>, <code>in between</code></li> <li>Tweaked <code>Dataframe.filter</code> to take a fourth and optional argument <code>limit</code> for range filters like <code>in between</code></li> </ul>"},{"location":"changelog/#aug-19th-2023-v01","title":"Aug 19th, 2023 - v0.1","text":"<ul> <li><code>Dataframe.head: Dataframe</code> returns the first five rows of the dataframe</li> <li><code>Dataframe.labels: Array&lt;string&gt;</code> returns the labels of the dataframe</li> <li><code>Dataframe.filter(key: string, filter: Condition, value: unknown)</code> - filters the rows in <code>Dataframe</code> and returns <code>Dataframe(dataframe)</code></li> <li><code>Dataframe.value</code> - exposes the <code>Dataframe</code>'s dataframe as <code>Array&lt;ObjectType&gt;</code></li> <li><code>Dataframe.count</code> - returns the count of rows in the dataframe or dataframe object</li> <li><code>Dataframe.isNull</code> - returns all the rows that have some properties equal to <code>null</code></li> <li><code>Dataframe.notNull</code> - returns all the rows that have every property equal to <code>!null</code></li> <li><code>Dataframe.dtypes</code> - returns all the data types of all the columns in the dataframe</li> </ul>"},{"location":"reference/Breadroll/","title":"Breadroll","text":""},{"location":"reference/Breadroll/#breadrollfilepath-string-options-dataframereadoptions","title":"<code>Breadroll(filepath: string, options: DataframeReadOptions)</code>","text":"<ul> <li><code>filepath: string</code> - the location of the file.</li> <li><code>options: DataframeReadOptions</code><ul> <li><code>DataframeReadOptions.header: boolean</code> when set to <code>true</code>, <code>Breadroll.open()</code> automatically gets the header from the file, ie. the first line</li> <li><code>DataframeReadOptions.delimiter: string</code> the delimiting string, it could be a variety of delimiter, the likes of <code>\",\"</code>, <code>\"\\t\"</code> and more</li> <li><code>DataframeReadOptions.keys?: Array&lt;string&gt;</code> this is an optional property for when <code>DataframeReadOptions.header</code> is <code>false</code></li> </ul> </li> </ul>"},{"location":"reference/Breadroll/#breadrollopen","title":"<code>Breadroll.open()</code>","text":"<ul> <li>This function opens and parses the specified file path in the <code>Breadroll()</code> instance, then returns <code>Dataframe</code></li> </ul> <pre><code>const file: Breadroll = new Breadroll(\"./test/data/adult.data\", { header: true, delimiter: \",\" });\nconst df: Dataframe = await file.open();\n\nconst workclass_equals_private = df.filter(\"workclass\", \"equals\", \"Private\").count; // number\n</code></pre>"},{"location":"reference/Dataframe/average/","title":".average","text":""},{"location":"reference/Dataframe/average/#dataframeaveragekey-string","title":"<code>Dataframe.average(key: string)</code>","text":"<p>This function returns the average of all the values of the specified column <code>number</code>, <code>key</code> is the labels in <code>Dataframe.labels</code></p> <pre><code>const average: number = df.average(\"key\"); // number\n</code></pre>"},{"location":"reference/Dataframe/count/","title":".count","text":""},{"location":"reference/Dataframe/count/#dataframecount","title":"<code>Dataframe.count</code>","text":"<p>This function returns the count of rows <code>number</code>, the most especially useful when use in tandem with the <code>Dataframe.filter()</code></p> <pre><code>const count: number = df.count; // number\n</code></pre>"},{"location":"reference/Dataframe/dtypes/","title":".dtypes","text":""},{"location":"reference/Dataframe/dtypes/#dataframedtypes","title":"<code>Dataframe.dtypes</code>","text":"<p>This function return an object <code>ObjectType</code> that shows the data type of each column in the dataframe in a key:value pair</p> <pre><code>const dtypes: ObjectType = df.dtypes; // { age: \"number\", workclass: \"string\", ... }\n</code></pre>"},{"location":"reference/Dataframe/filter/","title":".filter","text":""},{"location":"reference/Dataframe/filter/#dataframefilterkey-string-filter-condition-value-unknown-limit-unknown","title":"<code>Dataframe.filter(key: string, filter: Condition, value: unknown, limit?: unknown)</code>","text":"<p>This function returns <code>Dataframe</code> and it is used to filter out <code>Dataframe</code>, by checking if <code>key</code> which is the column label against a filter condition <code>Condition</code> using <code>value</code>.</p>"},{"location":"reference/Dataframe/filter/#condition","title":"<code>Condition</code>:","text":"<p>This is a <code>Union</code> type that sets the available filters, given by: <code>\"equal to\" | \"not equal to\" | \"contains\" | \"greater than\" | \"less than\" | \"greater than or equal to\" | \"less than or equal to\" | \"is between\"</code></p> <p>Note</p> <p><code>limit</code> is an optional fourth argument that is used with range filters like <code>in between</code></p> <pre><code>const filtered: Dataframe = df.filter(\"salary\", \"greater than\", 70000); // Dataframe\n</code></pre>"},{"location":"reference/Dataframe/filter/#multiple-chained-filter","title":"Multiple / Chained Filter","text":"<p>You can chain the filter ie. filtering the previously filtered <code>Dataframe</code>, the chained filter can be as long as you need them to be;</p> <pre><code>const filtered: Dataframe = df.filter(\"salary\", \"greater than\", 70000)\n                              .filter(\"work_year\", \"equals\", 2020); // Dataframe\n</code></pre>"},{"location":"reference/Dataframe/filter/#range-filters","title":"Range Filters","text":"<p>Range filters filter numerical values in the Dataframe that fall between a certain range (lower limit and upper limit);</p> <pre><code>const filtered: Dataframe = df.filter(\"salary\", \"in between\", 70000, 100000); // Dataframe\n</code></pre>"},{"location":"reference/Dataframe/head/","title":".head","text":""},{"location":"reference/Dataframe/head/#dataframehead","title":"<code>Dataframe.head</code>","text":"<p>This function return a Dataframe of the first 5 row of the Dataframe</p> <pre><code>const head: Array&lt;ObjectType&gt; = df.head; // return Dataframe\n</code></pre>"},{"location":"reference/Dataframe/isNull/","title":".isNull","text":""},{"location":"reference/Dataframe/isNull/#dataframeisnull","title":"<code>Dataframe.isNull</code>","text":"<p>This function return a new Dataframe object <code>Dataframe</code> where some of it properties have a <code>null</code></p> <pre><code>const isNull: Dataframe = df.isNull; // Dataframe\n</code></pre>"},{"location":"reference/Dataframe/labels/","title":".labels","text":""},{"location":"reference/Dataframe/labels/#dataframelabels","title":"<code>Dataframe.labels</code>","text":"<p>This function returns an array of strings <code>Array&lt;string&gt;</code> ie. the labels of each column of the dataframe</p> <pre><code>const labels: Arrat&lt;string&gt; = df.labels; // [\"age\", \"race\", \"workclass\", ...]\n</code></pre>"},{"location":"reference/Dataframe/max/","title":".max","text":""},{"location":"reference/Dataframe/max/#dataframemaxkey-string","title":"<code>Dataframe.max(key: string)</code>","text":"<p>This function returns the maximum value of all the values of the specified column <code>number</code>, <code>key</code> is the labels in <code>Dataframe.labels</code></p> <pre><code>const max: number = df.max(\"key\"); // number\n</code></pre>"},{"location":"reference/Dataframe/min/","title":".min","text":""},{"location":"reference/Dataframe/min/#dataframeminkey-string","title":"<code>Dataframe.min(key: string)</code>","text":"<p>This function returns the minimum value of all the values of the specified column <code>number</code>, <code>key</code> is the labels in <code>Dataframe.labels</code></p> <pre><code>const min: number = df.min(\"key\"); // number\n</code></pre>"},{"location":"reference/Dataframe/notNull/","title":".notNull","text":""},{"location":"reference/Dataframe/notNull/#dataframenotnull","title":"<code>Dataframe.notNull</code>","text":"<p>This function return a new Dataframe object <code>Dataframe</code> where none of it properties have a <code>null</code>, the inverse of <code>Dataframe.isNull</code></p> <pre><code>const notNull: Dataframe = df.notNull; // Dataframe\n</code></pre>"},{"location":"reference/Dataframe/save/","title":".save","text":""},{"location":"reference/Dataframe/save/#dataframesave","title":"<code>Dataframe.save</code>","text":""},{"location":"reference/Dataframe/save/#jsonfilepath-string","title":"<code>.json(filepath: string)</code>","text":"<p>This function saves <code>Dataframe</code> as a JSON files ie. for example.</p> <pre><code>df.save.json(\"./file.json\");\n</code></pre>"},{"location":"reference/Dataframe/save/#csvfilepath-string","title":"<code>.csv(filepath: string)</code>","text":"<p>This function saves <code>Dataframe</code> as a CSV files ie. for example.</p> <pre><code>df.save.csv(\"./file.csv\");\n</code></pre>"},{"location":"reference/Dataframe/save/#tsvfilepath-string","title":"<code>.tsv(filepath: string)</code>","text":"<p>This function saves <code>Dataframe</code> as a TSV files ie. for example.</p> <pre><code>df.save.tsv(\"./file.tsv\");\n</code></pre>"},{"location":"reference/Dataframe/select/","title":".select","text":""},{"location":"reference/Dataframe/select/#dataframeselectkeys-arraystring-dataframe","title":"<code>Dataframe.select(keys: Array&lt;string&gt;): Dataframe</code>","text":"<p>This function return a new Dataframe with only the desired rows, ie. rows with the specified labels</p> <pre><code>const selected: Dataframe = df.select([\"job_title\", \"salary\", \"salary_currency\", \"salary_in_usd\"]); // return Dataframe\n</code></pre>"},{"location":"reference/Dataframe/sum/","title":".sum","text":""},{"location":"reference/Dataframe/sum/#dataframesumkey-string","title":"<code>Dataframe.sum(key: string)</code>","text":"<p>This function returns the sum of all the values of the specified column <code>number</code>, <code>key</code> is the labels in <code>Dataframe.labels</code></p> <pre><code>const sum: number = df.sum(\"key\"); // number\n</code></pre>"},{"location":"reference/Dataframe/to_blob/","title":".to_blob","text":""},{"location":"reference/Dataframe/to_blob/#dataframeto_blobfiletype-csv-tsv-blob","title":"<code>Dataframe.to_blob(filetype: \"csv\" | \"tsv\"): Blob</code>","text":"<p>This function converts the current dataframe into a Blob of MIME filetype <code>\"csv\" | \"tsv\"</code></p> <pre><code>const blob: Blob = df.to_blob(\"csv\"); // Blob\n</code></pre>"},{"location":"reference/Dataframe/values/","title":".value","text":""},{"location":"reference/Dataframe/values/#dataframevalue","title":"<code>Dataframe.value</code>","text":"<p>This function exposes ie. returns an array of objects <code>Array&lt;ObjectType&gt;</code> that is within the <code>Dataframe</code></p> <pre><code>const values: Array&lt;ObjectType&gt; = df.value; // [{}, {}, {}, ...]\n</code></pre>"}]}